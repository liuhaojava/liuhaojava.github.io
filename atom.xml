<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>没有什么永垂不朽</title>
  
  <subtitle>没有比脚更长的路，走过去，前面是个天！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.bestliuhao.club/"/>
  <updated>2019-05-13T09:36:59.000Z</updated>
  <id>https://www.bestliuhao.club/</id>
  
  <author>
    <name>刘浩</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql分页列表使用LEFT JOIN时的优化方法</title>
    <link href="https://www.bestliuhao.club/mysql%E5%88%86%E9%A1%B5%E5%88%97%E8%A1%A8%E4%BD%BF%E7%94%A8LEFT%20JOIN%E6%97%B6%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95.html"/>
    <id>https://www.bestliuhao.club/mysql分页列表使用LEFT JOIN时的优化方法.html</id>
    <published>2019-05-13T09:43:25.525Z</published>
    <updated>2019-05-13T09:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql分页列表使用LEFT-JOIN时的优化方法"><a href="#mysql分页列表使用LEFT-JOIN时的优化方法" class="headerlink" title="mysql分页列表使用LEFT JOIN时的优化方法"></a>mysql分页列表使用LEFT JOIN时的优化方法</h1><h3 id="分页列表查询一般格式"><a href="#分页列表查询一般格式" class="headerlink" title="分页列表查询一般格式"></a>分页列表查询一般格式</h3><ul><li><p>取分页数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM table1 t1</span><br><span class="line">LEFT JOIN table2 t2 ON t2.id = t1.id</span><br><span class="line">LEFT JOIN table3 t3 ON t3.id = t1.id</span><br><span class="line">LEFT JOIN table4 t4 ON t4.id = t1.id</span><br><span class="line">WHERE t1.id = 1 AND t2. ...</span><br><span class="line">LIMIT 0,30</span><br></pre></td></tr></table></figure></li><li><p>取总数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(0)</span><br><span class="line">FROM table1 t1</span><br><span class="line">LEFT JOIN table2 t2 ON t2.id = t1.id</span><br><span class="line">LEFT JOIN table3 t3 ON t3.id = t1.id</span><br><span class="line">LEFT JOIN table4 t4 ON t4.id = t1.id</span><br><span class="line">WHERE t1.id = 1 AND t2. ...</span><br></pre></td></tr></table></figure></li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><blockquote><ul><li><code>LEFT JOIN</code>消耗性能</li><li>全部<code>LEFT JOIN</code>后再取分页</li><li>取总数时候不必要的<code>LEFT JOIN</code>影响性能</li></ul></blockquote><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><blockquote><ul><li><code>WHERE</code> 条件语句用不到的<code>LEFT JOIN</code>的表，放到取分页后面</li><li>取总数时候不必要的<code>LEFT JOIN</code>不要</li></ul></blockquote><ul><li><p>取分页数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM (</span><br><span class="line">    SELECT *</span><br><span class="line">    FROM table1 t1</span><br><span class="line">    LEFT JOIN table2 t2 ON t2.id = t1.id</span><br><span class="line">    LEFT JOIN table3 t3 ON t3.id = t1.id</span><br><span class="line">    WHERE t1.id = 1 AND t2. ...</span><br><span class="line">    LIMIT 0,30</span><br><span class="line">    )t</span><br><span class="line">LEFT JOIN table4 t4 ON t4.id = t1.id</span><br></pre></td></tr></table></figure></li><li><p>取总数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(0)</span><br><span class="line">FROM table1 t1</span><br><span class="line">LEFT JOIN table2 t2 ON t2.id = t1.id</span><br><span class="line">LEFT JOIN table2 t3 ON t3.id = t1.id</span><br><span class="line">WHERE t1.id = 1 AND t2. ...</span><br></pre></td></tr></table></figure></li></ul><h3 id="具体实际应用"><a href="#具体实际应用" class="headerlink" title="具体实际应用"></a>具体实际应用</h3><h4 id="网站分页列表"><a href="#网站分页列表" class="headerlink" title="网站分页列表"></a>网站分页列表</h4><h5 id="优化前"><a href="#优化前" class="headerlink" title="优化前"></a>优化前</h5><blockquote><ul><li>数据量：9741 </li><li>每页显示30条数据</li><li>平均每页刷新耗时：1100ms</li><li>列表数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    w.*,</span><br><span class="line">    d.`name` AS deptName,</span><br><span class="line">    IFNULL(de.`name`,&apos;&apos;) AS superviseName,</span><br><span class="line">    CASE WHEN w.school_id IS NULL THEN d.`name` ELSE s.name END AS schoolName</span><br><span class="line">    FROM website w</span><br><span class="line">    LEFT JOIN sys_dept d ON d.id = w.dept_id</span><br><span class="line">    LEFT JOIN sys_dept de ON de.id = w.supervise_id</span><br><span class="line">    LEFT JOIN sys_dept scan ON scan.id = w.scan_id</span><br><span class="line">    LEFT JOIN sys_dept verify ON verify.id = w.verify_id</span><br><span class="line">    LEFT JOIN sys_dept_info i ON i.dept_id = w.dept_id</span><br><span class="line">    LEFT JOIN dictionary_item item ON i.area_id = item.id</span><br><span class="line">    LEFT JOIN school s ON s.id = w.school_id</span><br><span class="line">    WHERE w.is_del = 0</span><br><span class="line">    &lt;if test=&quot;deptId != null and deptId != &apos;&apos;&quot;&gt;</span><br><span class="line">        AND d.id = #&#123;deptId&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;name != null and name != &apos;&apos;&quot;&gt;</span><br><span class="line">        AND (UPPER(w.name) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;name&#125;,&apos;%&apos;)))</span><br><span class="line">        OR UPPER(w.py) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;name&#125;,&apos;%&apos;))))</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;url != null and url != &apos;&apos;&quot;&gt;</span><br><span class="line">        AND UPPER(w.url) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;url&#125;,&apos;%&apos;)))</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;linkman != null and linkman != &apos;&apos;&quot;&gt;</span><br><span class="line">        AND UPPER(w.contact_name) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;linkman&#125;,&apos;%&apos;)))</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    ORDER BY w.create_date DESC</span><br><span class="line">    &lt;if test=&quot;pageSize != null &quot;&gt;</span><br><span class="line">        LIMIT #&#123;offset&#125;, #&#123;pageSize&#125;</span><br><span class="line">    &lt;/if&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>网站数量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    COUNT(0)</span><br><span class="line">    FROM website w</span><br><span class="line">    LEFT JOIN sys_dept d ON d.id = w.dept_id</span><br><span class="line">    LEFT JOIN sys_dept de ON de.id = w.supervise_id</span><br><span class="line">    LEFT JOIN sys_dept scan ON scan.id = w.scan_id</span><br><span class="line">    LEFT JOIN sys_dept verify ON verify.id = w.verify_id</span><br><span class="line">    LEFT JOIN sys_dept_info i ON i.dept_id = w.dept_id</span><br><span class="line">    LEFT JOIN dictionary_item item ON i.area_id = item.id</span><br><span class="line">    LEFT JOIN school s ON s.id = w.school_id</span><br><span class="line">    WHERE w.is_del = 0</span><br><span class="line">    &lt;if test=&quot;deptId != null and deptId != &apos;&apos;&quot;&gt;</span><br><span class="line">        AND d.id = #&#123;deptId&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;name != null and name != &apos;&apos;&quot;&gt;</span><br><span class="line">        AND (UPPER(w.name) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;name&#125;,&apos;%&apos;)))</span><br><span class="line">        OR UPPER(w.py) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;name&#125;,&apos;%&apos;))))</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;url != null and url != &apos;&apos;&quot;&gt;</span><br><span class="line">        AND UPPER(w.url) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;url&#125;,&apos;%&apos;)))</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;linkman != null and linkman != &apos;&apos;&quot;&gt;</span><br><span class="line">        AND UPPER(w.contact_name) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;linkman&#125;,&apos;%&apos;)))</span><br><span class="line">    &lt;/if&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h5><blockquote><ul><li>数据量：9741 </li><li>每页显示300条数据</li><li>平均每页刷新耗时：120ms</li></ul></blockquote><blockquote><ul><li>每页显示30条数据</li><li>平均每页刷新耗时：50ms</li><li>列表数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    t.*,</span><br><span class="line">    item.name                 AS areaName,</span><br><span class="line">    IFNULL(scan.`name`, &apos;&apos;)   AS scanName,</span><br><span class="line">    IFNULL(verify.`name`, &apos;&apos;) AS verifyName,</span><br><span class="line">    de.`name`                 AS superviseName</span><br><span class="line">    FROM (</span><br><span class="line">        SELECT</span><br><span class="line">            w.id,</span><br><span class="line">            w.name,</span><br><span class="line">            w.url,</span><br><span class="line">            w.dept_id,</span><br><span class="line">            w.scan_id,</span><br><span class="line">            w.supervise_id,</span><br><span class="line">            w.verify_id,</span><br><span class="line">            CASE WHEN w.school_id IS NULL THEN d.`name` ELSE s.name END  AS schoolName,</span><br><span class="line">            d.`name`                                                     AS deptName</span><br><span class="line">        FROM website w</span><br><span class="line">        LEFT JOIN sys_dept d ON d.id = w.dept_id</span><br><span class="line">        LEFT JOIN school s ON s.id = w.school_id</span><br><span class="line">        WHERE w.is_del = 0</span><br><span class="line">        &lt;if test=&quot;deptId != null and deptId != &apos;&apos;&quot;&gt;</span><br><span class="line">            AND d.id = #&#123;deptId&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;deptName != null and deptName != &apos;&apos;&quot;&gt;</span><br><span class="line">            AND (UPPER(d.name) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;deptName&#125;,&apos;%&apos;)))</span><br><span class="line">            OR UPPER(d.py) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;deptName&#125;,&apos;%&apos;)))</span><br><span class="line">            OR UPPER(s.name) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;deptName&#125;,&apos;%&apos;))))</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;name != null and name != &apos;&apos;&quot;&gt;</span><br><span class="line">            AND (UPPER(w.name) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;name&#125;,&apos;%&apos;)))</span><br><span class="line">            OR UPPER(w.py) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;name&#125;,&apos;%&apos;))))</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;url != null and url != &apos;&apos;&quot;&gt;</span><br><span class="line">            AND UPPER(w.url) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;url&#125;,&apos;%&apos;)))</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;linkman != null and linkman != &apos;&apos;&quot;&gt;</span><br><span class="line">            AND UPPER(w.contact_name) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;linkman&#125;,&apos;%&apos;)))</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        ORDER BY w.create_date DESC</span><br><span class="line">        &lt;if test=&quot;pageSize != null &quot;&gt;</span><br><span class="line">            LIMIT #&#123;offset&#125;, #&#123;pageSize&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    ) t</span><br><span class="line">    LEFT JOIN sys_dept_info i ON i.dept_id = t.dept_id</span><br><span class="line">    LEFT JOIN dictionary_item item ON i.area_id = item.id</span><br><span class="line">    LEFT JOIN sys_dept de ON de.id = t.supervise_id</span><br><span class="line">    LEFT JOIN sys_dept scan ON scan.id = t.scan_id</span><br><span class="line">    LEFT JOIN sys_dept verify ON verify.id = t.verify_id</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>网站数量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    COUNT(0)</span><br><span class="line">    FROM (</span><br><span class="line">        SELECT</span><br><span class="line">            w.id,</span><br><span class="line">            w.name,</span><br><span class="line">            w.url,</span><br><span class="line">            w.dept_id,</span><br><span class="line">            w.scan_id,</span><br><span class="line">            w.supervise_id,</span><br><span class="line">            w.verify_id,</span><br><span class="line">            CASE WHEN w.school_id IS NULL THEN d.`name` ELSE s.name END  AS schoolName,</span><br><span class="line">            d.`name`                                                     AS deptName</span><br><span class="line">        FROM website w</span><br><span class="line">        LEFT JOIN sys_dept d ON d.id = w.dept_id</span><br><span class="line">        LEFT JOIN school s ON s.id = w.school_id</span><br><span class="line">        WHERE w.is_del = 0</span><br><span class="line">        &lt;if test=&quot;deptId != null and deptId != &apos;&apos;&quot;&gt;</span><br><span class="line">            AND d.id = #&#123;deptId&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;deptName != null and deptName != &apos;&apos;&quot;&gt;</span><br><span class="line">            AND (UPPER(d.name) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;deptName&#125;,&apos;%&apos;)))</span><br><span class="line">            OR UPPER(d.py) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;deptName&#125;,&apos;%&apos;)))</span><br><span class="line">            OR UPPER(s.name) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;deptName&#125;,&apos;%&apos;))))</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;name != null and name != &apos;&apos;&quot;&gt;</span><br><span class="line">            AND (UPPER(w.name) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;name&#125;,&apos;%&apos;)))</span><br><span class="line">            OR UPPER(w.py) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;name&#125;,&apos;%&apos;))))</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;url != null and url != &apos;&apos;&quot;&gt;</span><br><span class="line">            AND UPPER(w.url) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;url&#125;,&apos;%&apos;)))</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;linkman != null and linkman != &apos;&apos;&quot;&gt;</span><br><span class="line">            AND UPPER(w.contact_name) LIKE UPPER(CONCAT(&apos;%&apos;,CONCAT(#&#123;linkman&#125;,&apos;%&apos;)))</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        ORDER BY w.create_date DESC</span><br><span class="line">        &lt;if test=&quot;pageSize != null &quot;&gt;</span><br><span class="line">            LIMIT #&#123;offset&#125;, #&#123;pageSize&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    ) t</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mysql分页列表使用LEFT-JOIN时的优化方法&quot;&gt;&lt;a href=&quot;#mysql分页列表使用LEFT-JOIN时的优化方法&quot; class=&quot;headerlink&quot; title=&quot;mysql分页列表使用LEFT JOIN时的优化方法&quot;&gt;&lt;/a&gt;mysql分页列
      
    
    </summary>
    
      <category term="数据库" scheme="https://www.bestliuhao.club/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql分页列表优化" scheme="https://www.bestliuhao.club/tags/mysql%E5%88%86%E9%A1%B5%E5%88%97%E8%A1%A8%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>springboot集成swagger2遇到的问题</title>
    <link href="https://www.bestliuhao.club/springboot%E9%9B%86%E6%88%90swagger2%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98.html"/>
    <id>https://www.bestliuhao.club/springboot集成swagger2遇到的问题.html</id>
    <published>2019-05-13T08:41:28.000Z</published>
    <updated>2019-05-14T06:44:52.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot项目集成swagger2的问题"><a href="#springboot项目集成swagger2的问题" class="headerlink" title="springboot项目集成swagger2的问题"></a>springboot项目集成swagger2的问题</h1><p>项目是从SSM项目整合过来的，swagger原本就有的，没有问题。整合到springboot项目时候，<a href="http://ip:port/swagger-ui.html会报错。" target="_blank" rel="noopener">http://ip:port/swagger-ui.html会报错。</a><br><strong>swagger</strong>配置如下：  </p><pre><code class="java"><span class="meta">@Configuration</span><span class="meta">@EnableSwagger</span>2<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>{    <span class="meta">@Bean</span>    <span class="function"><span class="keyword">public</span> Docket <span class="title">docketBean</span><span class="params">()</span> </span>{        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo(<span class="string">"教育厅一级平台"</span>))                .select()                .apis(RequestHandlerSelectors.basePackage(<span class="string">"qgs.education.platform.province.controller"</span>))                <span class="comment">//开启swagger</span>                .paths(PathSelectors.any())                <span class="comment">//禁用swagger</span><span class="comment">//                .paths(PathSelectors.none())</span>                .build()                .globalOperationParameters(setHeaderToken());    }    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">(String title)</span> </span>{        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()                .title(title)                .build();    }    <span class="function"><span class="keyword">private</span> Docket <span class="title">docket</span><span class="params">(String groupName, String title, String pathRegex)</span> </span>{        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)                .groupName(groupName).apiInfo(apiInfo(title))                .ignoredParameterTypes(ApiIgnore.class)                .select()                .apis(RequestHandlerSelectors.any())                .paths(regex(pathRegex))                .build()                .globalOperationParameters(setHeaderToken());    }    <span class="function"><span class="keyword">private</span> List&lt;Parameter&gt; <span class="title">setHeaderToken</span><span class="params">()</span> </span>{        ParameterBuilder tokenPar = <span class="keyword">new</span> ParameterBuilder();        List&lt;Parameter&gt; pars = <span class="keyword">new</span> ArrayList&lt;&gt;();        tokenPar.name(<span class="string">"Token"</span>).description(<span class="string">"令牌"</span>).modelRef(<span class="keyword">new</span> ModelRef(<span class="string">"string"</span>)).parameterType(<span class="string">"header"</span>).required(<span class="keyword">false</span>).build();        pars.add(tokenPar.build());        <span class="keyword">return</span> pars;    }}</code></pre><p><strong>拦截器</strong>配置如下：  </p><pre><code class="java"><span class="meta">@Configuration</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{    <span class="meta">@Autowired</span>    <span class="keyword">private</span> ControllerInterceptor controllerInterceptor;    <span class="meta">@Autowired</span>    <span class="keyword">private</span> AuthBusinessInterceptor authBusinessInterceptor;    <span class="meta">@Autowired</span>    <span class="keyword">private</span> AuthPlatformInterceptor authPlatformInterceptor;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{        registry.addInterceptor(controllerInterceptor);        registry.addInterceptor(authBusinessInterceptor);        registry.addInterceptor(authPlatformInterceptor)                .addPathPatterns(<span class="string">"/**"</span>);    }    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>{        registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(<span class="string">"/"</span>);        registry.addResourceHandler(<span class="string">"/**"</span>)                .addResourceLocations(<span class="string">"classpath:/static/"</span>);        registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);        registry.addResourceHandler(<span class="string">"/webjars/**"</span>)                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);    }    <span class="comment">/**</span><span class="comment">     * 配置servlet处理</span><span class="comment">     */</span>    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureDefaultServletHandling</span><span class="params">(DefaultServletHandlerConfigurer configurer)</span> </span>{        configurer.enable();    }}</code></pre><p>如上配置访问<a href="http://ip:port/swagger-ui.html会报错" target="_blank" rel="noopener">http://ip:port/swagger-ui.html会报错</a><br><img src="/springboot集成swagger2遇到的问题/swagger.jpg" alt=""><br>访问<a href="http://ip:port/v2/api-docs正常" target="_blank" rel="noopener">http://ip:port/v2/api-docs正常</a><br>猜想应该是没有找到静态资源的问题，但是拦截器配置那里是加了的</p><pre><code class="java"><span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>{        registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(<span class="string">"/"</span>);        registry.addResourceHandler(<span class="string">"/**"</span>)                .addResourceLocations(<span class="string">"classpath:/static/"</span>);        registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);        registry.addResourceHandler(<span class="string">"/webjars/**"</span>)                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);    }</code></pre><p>以上代码不起作用。<br>网上找了好久，偶然看到一个swagger配置继承WebMvcConfigurationSupport，试了一下，是可以的。修改后的配置：<br><strong>swagger</strong>配置修改后如下：  </p><pre><code class="java"><span class="meta">@Configuration</span><span class="meta">@EnableSwagger</span>2<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span>  <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>{    <span class="meta">@Bean</span>    <span class="function"><span class="keyword">public</span> Docket <span class="title">docketBean</span><span class="params">()</span> </span>{        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo(<span class="string">"教育厅一级平台"</span>))                .select()                .apis(RequestHandlerSelectors.basePackage(<span class="string">"qgs.education.platform.province.controller"</span>))                <span class="comment">//开启swagger</span>                .paths(PathSelectors.any())                <span class="comment">//禁用swagger</span><span class="comment">//                .paths(PathSelectors.none())</span>                .build()                .globalOperationParameters(setHeaderToken());    }    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">(String title)</span> </span>{        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()                .title(title)                .build();    }    <span class="function"><span class="keyword">private</span> Docket <span class="title">docket</span><span class="params">(String groupName, String title, String pathRegex)</span> </span>{        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)                .groupName(groupName).apiInfo(apiInfo(title))                .ignoredParameterTypes(ApiIgnore.class)                .select()                .apis(RequestHandlerSelectors.any())                .paths(regex(pathRegex))                .build()                .globalOperationParameters(setHeaderToken());    }    <span class="function"><span class="keyword">private</span> List&lt;Parameter&gt; <span class="title">setHeaderToken</span><span class="params">()</span> </span>{        ParameterBuilder tokenPar = <span class="keyword">new</span> ParameterBuilder();        List&lt;Parameter&gt; pars = <span class="keyword">new</span> ArrayList&lt;&gt;();        tokenPar.name(<span class="string">"Token"</span>).description(<span class="string">"令牌"</span>).modelRef(<span class="keyword">new</span> ModelRef(<span class="string">"string"</span>)).parameterType(<span class="string">"header"</span>).required(<span class="keyword">false</span>).build();        pars.add(tokenPar.build());        <span class="keyword">return</span> pars;    }    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>{        registry.addResourceHandler(<span class="string">"/**"</span>)                .addResourceLocations(<span class="string">"classpath:/static/"</span>);        registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);        registry.addResourceHandler(<span class="string">"/webjars/**"</span>)                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);    }}</code></pre><p><strong>拦截器</strong>配置修改后如下:  </p><pre><code class="java"><span class="meta">@Configuration</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>{    <span class="meta">@Autowired</span>    <span class="keyword">private</span> ControllerInterceptor controllerInterceptor;    <span class="meta">@Autowired</span>    <span class="keyword">private</span> AuthBusinessInterceptor authBusinessInterceptor;    <span class="meta">@Autowired</span>    <span class="keyword">private</span> AuthPlatformInterceptor authPlatformInterceptor;    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>{        registry.addInterceptor(controllerInterceptor);        registry.addInterceptor(authBusinessInterceptor);        registry.addInterceptor(authPlatformInterceptor)                .addPathPatterns(<span class="string">"/**"</span>)                .excludePathPatterns(<span class="string">"/swagger-resources/**"</span>,                <span class="string">"/swagger-ui.html"</span>,                <span class="string">"/v2/api-docs"</span>,                <span class="string">"/webjars/**"</span>);    }}</code></pre><blockquote><p>注意：<code>.excludePathPatterns(&quot;/swagger-resources/**&quot;,                      &quot;/swagger-ui.html&quot;,                      &quot;/v2/api-docs&quot;,                      &quot;/webjars/**&quot;)</code> 是为了避免swagger-ui.html被拦截。  </p></blockquote><p>重启项目，访问<a href="http://ip:port/swagger-ui.html正常。" target="_blank" rel="noopener">http://ip:port/swagger-ui.html正常。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;springboot项目集成swagger2的问题&quot;&gt;&lt;a href=&quot;#springboot项目集成swagger2的问题&quot; class=&quot;headerlink&quot; title=&quot;springboot项目集成swagger2的问题&quot;&gt;&lt;/a&gt;springboot项
      
    
    </summary>
    
      <category term="问题及解决" scheme="https://www.bestliuhao.club/categories/%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    
    
      <category term="问题及解决" scheme="https://www.bestliuhao.club/tags/%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>Java-常用查找算法</title>
    <link href="https://www.bestliuhao.club/Java-%E5%B8%B8%E7%94%A8%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95.html"/>
    <id>https://www.bestliuhao.club/Java-常用查找算法.html</id>
    <published>2019-02-28T08:25:07.000Z</published>
    <updated>2019-05-13T09:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>二叉树：</strong>  </p><ol><li>左子树上的所有节点值均小于根节点值，</li><li>右子树上的所有节点值均不小于根节点值，</li><li>左右子树也满足上述两个条件。<br>插入过程如下图：比较4与7，4&lt;7，再比较4与7的左子树6，4&lt;6，比较4与6的左子树3，4&gt;3，比较4与3的右子树，为空，插入4。（字符串作为key比较可以用compareTo）<br><img src="/Java-常用查找算法/常用查找算法1.png" alt=""></li></ol><p><strong>删除分为三种情况：</strong> </p><ol><li>p为叶子节点，直接删除该节点，再修改其父节点的指针（注意是父节点和不是根节点），如图a。</li><li>p为单支节点（即只有左子树或右子树）。让p的子树与p的父亲节点相连，删除p即可；（注意分是根节点和不是根节点）；如图b。</li><li>p的左子树和右子树均不空。找到p的后继y，因为y一定没有左子树，所以可以删除y，并让y的父亲节点成为y的右子树的父亲节点，并用y的值代替p的值；或者方法二是找到p的前驱x，x一定没有右子树，所以可以删除x，并让x的父亲节点成为y的左子树的父亲节点。如图c。<br><img src="/Java-常用查找算法/常用查找算法2.png" alt=""><br><img src="/Java-常用查找算法/常用查找算法3.png" alt=""><br><img src="/Java-常用查找算法/常用查找算法4.png" alt=""></li></ol><p><strong>红黑树：</strong></p><ol><li>每个节点颜色不是黑色，就是红色 </li><li>根节点是黑色的 </li><li>如果节点是红色的，则它的子节点必须是黑色的（反之不一定，没有连续的红节点） </li><li>从根节点到叶子节点的每条路径，必须包含相同数目的黑色节点</li><li>红黑树继承二叉树的性质<br>插入节点：<br>往一个空的红黑树中，依次插入数据：12 1 9 2 0 11 7 19 4<br><img src="/Java-常用查找算法/常用查找算法5.png" alt=""><br><img src="/Java-常用查找算法/常用查找算法6.png" alt=""><br><img src="/Java-常用查找算法/常用查找算法7.png" alt=""><br><img src="/Java-常用查找算法/常用查找算法8.png" alt=""><br><img src="/Java-常用查找算法/常用查找算法9.png" alt=""><br><img src="/Java-常用查找算法/常用查找算法10.png" alt=""><br><img src="/Java-常用查找算法/常用查找算法11.png" alt=""><br><img src="/Java-常用查找算法/常用查找算法12.png" alt=""><blockquote><p>删除节点同插入分析方式。<br>通过任意一条从根到叶子简单路径上颜色的约束，红黑树保证最长路径不超过最短路径的二倍，因而近似平衡。</p></blockquote></li></ol><p><strong>b树：</strong><br>B树的性质（m阶的B树，m表示节点的最大子节点数就是最大分支数，与高度h没有关系）</p><ol><li>树中每个结点最多含有m个孩子（m&gt;=2）； </li><li>除根结点和叶子结点外，其它每个结点至少有[ceil(m / 2)]个孩子（其中ceil(x)是一个取上限的函数）；<br>3、根结点至少有2个孩子（除非B树只包含一个结点：根结点）； </li><li>所有叶子结点都出现在同一层，叶子结点不包含任何关键字信息(可以看做是外部结点或查询失败的结点，指向这些结点的指针都为null)；（注：叶子节点只是没有孩子和指向孩子的指针，这些节点也存在，也有元素。类似红黑树中，每一个NULL指针即当做叶子结点，只是没画出来而已，2、3规则决定是平衡树）。 </li><li>每个非终端结点中包含有n个关键字信息： (n，P0，K1，P1，K2，P2，……，Kn，Pn)。<br>其中： <ol><li>Ki (i=1…n)为关键字，且关键字按顺序升序排序K(i-1)&lt; Ki。</li><li>Pi为指向子树根的结点，且指针P(i-1)指向子树种所有结点的关键字均小于Ki，但都大于K(i-1)。 </li><li>关键字的个数n必须满足： [ceil(m / 2)-1]&lt;= n &lt;= m-1。比如有j个孩子的非叶结点恰好有j-1个关键码。</li></ol></li></ol><p><strong>B树拆分原则：</strong> 达到最大关键字数时，中位上移，如5阶B树，1234插入下一个5，这时候为12345，违反关键字n&lt;=（5-1），这时候3上移</p><p><strong>b+树：</strong><br>在B-树基础上，为叶子结点增加链表指针，所有关键字都在叶子结点 中出现，非叶子结点作为叶子结点的索引；B+树总是到叶子结点才命中</p><p><strong>hash：</strong>  </p><p><strong>倒排：</strong>  </p><p><strong>总结：</strong>  </p><ol><li>二叉树不是平衡树，让插入的值分别为1，2，3，4，5时，他会在右子树一条线上，这样跟链表是类似了，达不到高效查找的效果了</li><li>B树是一种多叉平衡查找树，红黑树是二叉平衡查找树结构，B树由于是多叉结构，对于元素数量非常多的情况下，树的深度不会像二叉结构那么大，可以保证查询效率。</li><li>b树每个节点都存储[ceil(m / 2)-1]&lt;= n &lt;= m-1个关键字，而b+树所有关键字都在叶子节点，非叶子节点作为叶子节点的索引，关键字都按从小到大顺序排列</li><li>B+树还有一个最大的好处，方便扫库，B树必须用中序遍历的方法按序扫库，而B+树直接从叶子结点挨个扫一遍就完了，B+树支持range-query非常方便，而B树不支持。这是数据库选用B+树的最主要原因</li></ol><p>参考文献：<br>常用算法：<br><a href="https://blog.csdn.net/eson_15/article/details/51138663" target="_blank" rel="noopener">https://blog.csdn.net/eson_15/article/details/51138663</a> 二叉树<br><a href="https://blog.csdn.net/u014182411/article/details/69831492" target="_blank" rel="noopener">https://blog.csdn.net/u014182411/article/details/69831492</a> 二叉树<br><a href="https://www.cnblogs.com/aiyelinglong/archive/2012/03/27/2419972.html" target="_blank" rel="noopener">https://www.cnblogs.com/aiyelinglong/archive/2012/03/27/2419972.html</a> 二叉树<br><a href="https://blog.csdn.net/eson_15/article/details/51144079" target="_blank" rel="noopener">https://blog.csdn.net/eson_15/article/details/51144079</a> 红黑树<br><a href="https://www.jianshu.com/p/d25e490e2441" target="_blank" rel="noopener">https://www.jianshu.com/p/d25e490e2441</a> 红黑树 +1<br><a href="https://blog.csdn.net/tanrui519521/article/details/80980135" target="_blank" rel="noopener">https://blog.csdn.net/tanrui519521/article/details/80980135</a> 红黑树<br><a href="https://www.jianshu.com/p/7dedb7ebe033" target="_blank" rel="noopener">https://www.jianshu.com/p/7dedb7ebe033</a> B树<br><a href="https://www.jianshu.com/p/6f68d3c118d6" target="_blank" rel="noopener">https://www.jianshu.com/p/6f68d3c118d6</a> b+树<br><a href="https://www.jianshu.com/p/db226e0196b4" target="_blank" rel="noopener">https://www.jianshu.com/p/db226e0196b4</a> b树、B+树<br><a href="https://www.cnblogs.com/boothsun/p/8970952.html" target="_blank" rel="noopener">https://www.cnblogs.com/boothsun/p/8970952.html</a> 二叉、b、b+树<br><a href="https://www.cnblogs.com/dreamroute/p/8484457.html" target="_blank" rel="noopener">https://www.cnblogs.com/dreamroute/p/8484457.html</a> 倒排索引<br><a href="https://blog.csdn.net/CrankZ/article/details/80615789" target="_blank" rel="noopener">https://blog.csdn.net/CrankZ/article/details/80615789</a> 倒排索引  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;二叉树：&lt;/strong&gt;  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;左子树上的所有节点值均小于根节点值，&lt;/li&gt;
&lt;li&gt;右子树上的所有节点值均不小于根节点值，&lt;/li&gt;
&lt;li&gt;左右子树也满足上述两个条件。&lt;br&gt;插入过程如下图：比较4与7，4&amp;lt;7，再比较4
      
    
    </summary>
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/categories/Java%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/tags/Java%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Java-Mysql索引原理</title>
    <link href="https://www.bestliuhao.club/Java-Mysql%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86.html"/>
    <id>https://www.bestliuhao.club/Java-Mysql索引原理.html</id>
    <published>2019-02-28T08:19:26.000Z</published>
    <updated>2019-05-13T09:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了快速查询，很多时候，我们会建立不同的索引，满足需求，mysql主要索引引擎有MyISAM和InnoDB，两者都是使用B+Tree作为索引结构，两者的<br>区别： 一是主索引的区别，InnoDB的数据文件本身就是索引文件。而MyISAM的索引和数据是分开的。 二是辅助索引的区别：InnoDB的辅助索引data<br>域存储相应记录主键的值而不是地址。而MyISAM的辅助索引和主索引没有多大区别。<br><img src="/Java-Mysql索引原理/Java-Mysql索引原理1.png" alt=""><br><img src="/Java-Mysql索引原理/Java-Mysql索引原理2.png" alt=""><br><img src="/Java-Mysql索引原理/Java-Mysql索引原理3.png" alt=""><br>查询过程如下：<br><img src="/Java-Mysql索引原理/Java-Mysql索引原理4.png" alt=""><br>在上图中，如果要查找数据项29，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1<br>的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，29在<br>26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。真实的情<br>况是，3层的b+树可以表示上百万的数据（h高度会影响数据量），如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据<br>项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。<br>性能优化点：  </p><ol><li>索引建立</li><li>sql中使用函数会导致索引失效</li><li>sql中like “xx%”索引生效，like “%xx”和like “%xx%”，索引不生效</li><li>in (1，2，3) 常量索引生效，in (子查询)，索引不生效</li><li>缩小结果集查询</li></ol><p>参考文献：<br><a href="https://blog.csdn.net/u010842515/article/details/68929687" target="_blank" rel="noopener">https://blog.csdn.net/u010842515/article/details/68929687</a> MyISAM和InnoDB引擎区别<br><a href="https://www.cnblogs.com/ssrstm/p/6806111.html" target="_blank" rel="noopener">https://www.cnblogs.com/ssrstm/p/6806111.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了快速查询，很多时候，我们会建立不同的索引，满足需求，mysql主要索引引擎有MyISAM和InnoDB，两者都是使用B+Tree作为索引结构，两者的&lt;br&gt;区别： 一是主索引的区别，InnoDB的数据文件本身就是索引文件。而MyISAM的索引和数据是分开的。 二是辅助索
      
    
    </summary>
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/categories/Java%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/tags/Java%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Java-集合原理</title>
    <link href="https://www.bestliuhao.club/Java-%E9%9B%86%E5%90%88%E5%8E%9F%E7%90%86.html"/>
    <id>https://www.bestliuhao.club/Java-集合原理.html</id>
    <published>2019-02-28T07:59:51.000Z</published>
    <updated>2019-05-13T09:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>数组中内存是连续的，只需对 [基地址+元素大小*k] 就能找到第k个元素的地址，可以快速找到特定的值，但是想在有序数组中插入一个新的数据项，<br>就必须首先找出新数据项插入的位置，然后将比新数据项大的数据项向后移动一位，来给新的数据项腾出空间，删除同理，这样移动很费时。显而易见，<br>如果要做很多的插入和删除操作和删除操作，就不该选用有序数组。<br>另一方面，链表中可以快速添加和删除某个数据项，但是在链表中查找数据项可不容易，必须从头开始访问链表的每一个数据项，直到找到该数据项为止，<br>这个过程很慢。  </p><p> <strong>HashMap</strong><br>在JDK1.8之前，HashMap采用数组+链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。但是当位于一个桶中的元素较多，<br>即hash值相等的元素较多时，通过key值依次查找的效率较低<br><img src="/Java-集合原理/Java-集合原理1.png" alt=""><br>而JDK1.8中，HashMap采用数组+链表+红黑树实现，当链表长度超过阈值（8）时，将链表转换为红黑树，这样大大减少了查找时间<br><img src="/Java-集合原理/Java-集合原理2.png" alt=""><br>transient int size：表示当前HashMap包含的键值对数量<br>transient int modCount：表示当前HashMap修改次数<br>int threshold：表示当前HashMap能够承受的最多的键值对数量，一旦超过这个数量HashMap就会进行扩容<br>threshold = loadFactor <em>容量，12=0.75</em>16<br>final float loadFactor：负载因子，用于扩容<br>static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4(表示1，左移4位，变成10000，也就是16.)：默认的初始容量<br>static final float DEFAULT_LOAD_FACTOR = 0.75f：默认的负载因子<br>static final int MIN_TREEIFY_CAPACITY = 64：当哈希表中的容量大于这个值时，表中的桶才能进行树形化，否则桶内元素太多时会扩容，而不是树形化，为了避免进行扩容、树形化选择的冲突，这个值不能小于 4 * TREEIFY_THRESHOLD<br>static final int TREEIFY_THRESHOLD = 8：当桶中元素个数超过这个值时需要使用红黑树节点替换链表节点<br>static final int UNTREEIFY_THRESHOLD = 6：当扩容时，桶中元素个数小于这个值就会把树形的桶元素 还原（切分）为链表结构  </p><ol><li>为什么hashMap的容量一定是2的次幂?<br>首先hashmap构造函数，默认容量是16，如果是指定容量大小，那么最终会调用tableSizeFor(initialCapacity)方法是用来计算初始容量的,<br>这个方法会返回一个比给定容量大的最小2的次幂的数，所以一定是2的次幂，举个例子:如果你给了9，比9大的最小2的次幂是16(2^4)；如果你给个27，<br>比27大的最小的2的次幂是32(2^5)，为什么一定要2的次幂呢？因为<br>key值落点的计算方式： [(n - 1) &amp; hash] ，与“取余”是等价的算法<br>第一种方式计算出的key值落点越平均，hash冲突的可能性越小。<br>当容量大小是2的次幂时，(%和&amp;)2种算法，hash冲突可能性是一样的，但是&amp;效率高<br>当容量不是2的次幂时， &amp;这种算法，key值落点更平均，hash冲突可能性更小，同时&amp;效率也高</li><li>负载因子为什么会影响HashMap性能，为什么默认是0.75f<br>因为负载因子越大则HashMap的装填程度越高，也就是能容纳更多的元素，元素多了，链表大了，所以此时索引效率就会降低。反之，负载因子越小则链<br>表中的数据量就越稀疏，此时会对空间造成烂费，但是此时索引效率高</li></ol><p>参考文献：<br><a href="https://blog.csdn.net/qq_25868207/article/details/55259978" target="_blank" rel="noopener">https://blog.csdn.net/qq_25868207/article/details/55259978</a><br><a href="https://blog.csdn.net/u010890358/article/details/80496144" target="_blank" rel="noopener">https://blog.csdn.net/u010890358/article/details/80496144</a> hashmap扩容<br><a href="https://blog.csdn.net/lizhongkaide/article/details/50595719" target="_blank" rel="noopener">https://blog.csdn.net/lizhongkaide/article/details/50595719</a> hashmap原理<br><a href="https://blog.csdn.net/qq_36178899/article/details/84333151" target="_blank" rel="noopener">https://blog.csdn.net/qq_36178899/article/details/84333151</a> hashmap原理<br><a href="https://segmentfault.com/a/1190000012926722" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012926722</a> hashmap原理<br><a href="https://segmentfault.com/a/1190000017509668" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017509668</a> hashmap落点均匀<br><a href="https://blog.csdn.net/u010841296/article/details/82832166" target="_blank" rel="noopener">https://blog.csdn.net/u010841296/article/details/82832166</a> hashmap容量大小<br><a href="http://www.360linker.com/sj/643.jhtml" target="_blank" rel="noopener">http://www.360linker.com/sj/643.jhtml</a> hashmap容量大小  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数组中内存是连续的，只需对 [基地址+元素大小*k] 就能找到第k个元素的地址，可以快速找到特定的值，但是想在有序数组中插入一个新的数据项，&lt;br&gt;就必须首先找出新数据项插入的位置，然后将比新数据项大的数据项向后移动一位，来给新的数据项腾出空间，删除同理，这样移动很费时。显
      
    
    </summary>
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/categories/Java%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/tags/Java%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Java-代理</title>
    <link href="https://www.bestliuhao.club/Java-%E4%BB%A3%E7%90%86.html"/>
    <id>https://www.bestliuhao.club/Java-代理.html</id>
    <published>2019-02-28T07:49:58.000Z</published>
    <updated>2019-05-13T09:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Jdk动态代理(代理接口)</strong></p><p>通过获取委托类实现的所有接口，为每个接口方法创建一个代理方法，通过ProxyGenerator.generateProxyClass动态生成代理类字节码文件并加载<br>，反射生成代理对象，代理对象调用的时候通过自定义的InvocationHandler（super.h）调用invoke方法，在回调方法invoke中，使用反射调用原<br>对象的方法method.invoke(target, args);<br><img src="/Java-代理/Java-代理1.png" alt=""><br><img src="/Java-代理/Java-代理2.png" alt=""><br><strong>动态生成的代理类关键代码</strong><br><img src="/Java-代理/Java-代理3.png" alt=""><br>Cglib动态代理(代理类) 通过继承一个委托类，通过ASM框架strategy.generate(this)动态生成代理子类字节码文件并加载，反射生成对象，调用<br>的时候可以通过实现MethodInterceptor接口的intercept拦截方法，进行拦截， intercept方法中，前后增加处理代码，然后调用<br>proxy.invokeSuper(obj, args); （该方法，最终调用父类方法如super.add().），如果不拦截，则默认直接调用父类方法<br><img src="/Java-代理/Java-代理4.png" alt=""><br><img src="/Java-代理/Java-代理5.png" alt=""><br><strong>动态生成的代理类关键代码</strong><br><img src="/Java-代理/Java-代理6.png" alt=""></p><p>参考文献：</p><p><a href="https://www.cnblogs.com/MOBIN/p/5597215.html" target="_blank" rel="noopener">https://www.cnblogs.com/MOBIN/p/5597215.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Jdk动态代理(代理接口)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过获取委托类实现的所有接口，为每个接口方法创建一个代理方法，通过ProxyGenerator.generateProxyClass动态生成代理类字节码文件并加载&lt;br&gt;，反射生成代理对象，代理对象
      
    
    </summary>
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/categories/Java%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/tags/Java%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Java-总结 参考文献</title>
    <link href="https://www.bestliuhao.club/Java-%E6%80%BB%E7%BB%93-%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE.html"/>
    <id>https://www.bestliuhao.club/Java-总结-参考文献.html</id>
    <published>2019-02-28T07:30:15.000Z</published>
    <updated>2019-05-13T09:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>类加载机制<br><a href="https://www.cnblogs.com/xdouby/p/5829423.html" target="_blank" rel="noopener">https://www.cnblogs.com/xdouby/p/5829423.html</a><br><a href="https://blog.csdn.net/htf2620032/article/details/79298661" target="_blank" rel="noopener">https://blog.csdn.net/htf2620032/article/details/79298661</a> springlboot类加载<br><a href="http://www.cnblogs.com/zheting/p/6707035.html" target="_blank" rel="noopener">http://www.cnblogs.com/zheting/p/6707035.html</a> springboot<br><a href="https://blog.csdn.net/leileibest_437147623/article/details/80898878" target="_blank" rel="noopener">https://blog.csdn.net/leileibest_437147623/article/details/80898878</a> springboot</p><p>jvm原理、gc垃圾回收机制：<br><a href="http://www.importnew.com/23792.html" target="_blank" rel="noopener">http://www.importnew.com/23792.html</a><br><a href="https://www.cnblogs.com/aspirant/p/8662690.html" target="_blank" rel="noopener">https://www.cnblogs.com/aspirant/p/8662690.html</a> </p><p>jdk动态原理<br><a href="https://www.cnblogs.com/MOBIN/p/5597215.html" target="_blank" rel="noopener">https://www.cnblogs.com/MOBIN/p/5597215.html</a> </p><p>java集合<br><a href="https://blog.csdn.net/qq_25868207/article/details/55259978" target="_blank" rel="noopener">https://blog.csdn.net/qq_25868207/article/details/55259978</a><br><a href="https://blog.csdn.net/u010890358/article/details/80496144" target="_blank" rel="noopener">https://blog.csdn.net/u010890358/article/details/80496144</a> hashmap扩容<br><a href="https://blog.csdn.net/lizhongkaide/article/details/50595719" target="_blank" rel="noopener">https://blog.csdn.net/lizhongkaide/article/details/50595719</a> hashmap原理<br><a href="https://blog.csdn.net/qq_36178899/article/details/84333151" target="_blank" rel="noopener">https://blog.csdn.net/qq_36178899/article/details/84333151</a> hashmap原理<br><a href="https://segmentfault.com/a/1190000012926722" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012926722</a> hashmap原理<br><a href="https://segmentfault.com/a/1190000017509668" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017509668</a> hashmap落点均匀<br><a href="https://blog.csdn.net/u010841296/article/details/82832166" target="_blank" rel="noopener">https://blog.csdn.net/u010841296/article/details/82832166</a> hashmap容量大小<br><a href="http://www.360linker.com/sj/643.jhtml" target="_blank" rel="noopener">http://www.360linker.com/sj/643.jhtml</a> hashmap容量大小</p><p>Mysql索引原理<br><a href="https://blog.csdn.net/u010842515/article/details/68929687" target="_blank" rel="noopener">https://blog.csdn.net/u010842515/article/details/68929687</a> MyISAM和InnoDB引擎区别<br><a href="https://www.cnblogs.com/ssrstm/p/6806111.html" target="_blank" rel="noopener">https://www.cnblogs.com/ssrstm/p/6806111.html</a> </p><p>常用算法：<br><a href="https://blog.csdn.net/eson_15/article/details/51138663" target="_blank" rel="noopener">https://blog.csdn.net/eson_15/article/details/51138663</a> 二叉树<br><a href="https://blog.csdn.net/u014182411/article/details/69831492" target="_blank" rel="noopener">https://blog.csdn.net/u014182411/article/details/69831492</a> 二叉树<br><a href="https://www.cnblogs.com/aiyelinglong/archive/2012/03/27/2419972.html" target="_blank" rel="noopener">https://www.cnblogs.com/aiyelinglong/archive/2012/03/27/2419972.html</a> 二叉树<br><a href="https://blog.csdn.net/eson_15/article/details/51144079" target="_blank" rel="noopener">https://blog.csdn.net/eson_15/article/details/51144079</a> 红黑树<br><a href="https://www.jianshu.com/p/d25e490e2441" target="_blank" rel="noopener">https://www.jianshu.com/p/d25e490e2441</a> 红黑树 +1<br><a href="https://blog.csdn.net/tanrui519521/article/details/80980135" target="_blank" rel="noopener">https://blog.csdn.net/tanrui519521/article/details/80980135</a> 红黑树<br><a href="https://www.jianshu.com/p/7dedb7ebe033" target="_blank" rel="noopener">https://www.jianshu.com/p/7dedb7ebe033</a> B树<br><a href="https://www.jianshu.com/p/6f68d3c118d6" target="_blank" rel="noopener">https://www.jianshu.com/p/6f68d3c118d6</a> b+树<br><a href="https://www.jianshu.com/p/db226e0196b4" target="_blank" rel="noopener">https://www.jianshu.com/p/db226e0196b4</a> b树、B+树<br><a href="https://www.cnblogs.com/boothsun/p/8970952.html" target="_blank" rel="noopener">https://www.cnblogs.com/boothsun/p/8970952.html</a> 二叉、b、b+树<br><a href="https://www.cnblogs.com/dreamroute/p/8484457.html" target="_blank" rel="noopener">https://www.cnblogs.com/dreamroute/p/8484457.html</a> 倒排索引<br><a href="https://blog.csdn.net/CrankZ/article/details/80615789" target="_blank" rel="noopener">https://blog.csdn.net/CrankZ/article/details/80615789</a> 倒排索引</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;类加载机制&lt;br&gt;&lt;a href=&quot;https://www.cnblogs.com/xdouby/p/5829423.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/xdouby/p/5829423.
      
    
    </summary>
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/categories/Java%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/tags/Java%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>反射</title>
    <link href="https://www.bestliuhao.club/Java-%E5%8F%8D%E5%B0%84.html"/>
    <id>https://www.bestliuhao.club/Java-反射.html</id>
    <published>2019-02-28T07:23:09.000Z</published>
    <updated>2019-05-13T09:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/Java-反射/反射.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/Java-反射/反射.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/categories/Java%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/tags/Java%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>gc垃圾回收机制</title>
    <link href="https://www.bestliuhao.club/gc%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6.html"/>
    <id>https://www.bestliuhao.club/gc垃圾回收机制.html</id>
    <published>2019-02-28T07:06:46.000Z</published>
    <updated>2019-05-13T09:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>判断对象是否存活一般有两种方式：</p><ol><li>引用计数：每个对象有一个引用计数属性，新增一个引用时计数加1，引用释放时计数减1，计数为0时可以回收。此方法简单，无法解决对象相互循环引用的问题。 </li><li>可达性分析（Reachability Analysis）：从GC Roots开始向下搜索，搜索所走过的路径称为引用链。当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的，不可达对象</li></ol><p><strong>什么是根引用？</strong></p><p>在JAVA语言中，可作为GC ROOTS的对象包括：</p><ol><li>虚拟机栈中引用的对象（栈帧中的本地变量表）；</li><li>方法区中类静态属性引用的属性；</li><li>方法区中常量引用的对象；</li><li>本地方法栈中JNI（Native法防）引用的对象。</li></ol><p>GC最基础的算法有三种：标记 -清除算法、复制算法、标记-压缩算法，我们常用的垃圾回收器一般都采用分代收集算法</p><p><strong>标记-清除算法（Mark-Sweep）</strong><br><img src="/gc垃圾回收机制/gc垃圾回收机制1.png" alt=""></p><ul><li>优点：解决了循环引用的问题。</li><li>缺点：<ul><li>暂停整个应用；</li><li>会产生内存碎片。</li><li>不管你这个对象是不是可达的，即是不是垃圾，都要在清楚阶段被检查一遍，非常耗时.</li></ul></li></ul><p><strong>复制算法(Copying)</strong><br><img src="/gc垃圾回收机制/gc垃圾回收机制2.png" alt=""></p><ul><li>优点：不会出现碎片问题。</li><li>缺点：暂停整个应用，需要2倍的内存空间</li></ul><p><strong>标记-整理算法(Mark-compact)</strong><br><img src="/gc垃圾回收机制/gc垃圾回收机制3.png" alt=""></p><p><strong>分代收集算法</strong><br><img src="/gc垃圾回收机制/gc垃圾回收机制4.jpg" alt=""></p><ol><li>年轻代（Young区）的回收算法 (回收主要以Copying算法为主) Minor GC<br>新生代内存按照8:1:1的比例分为一个eden区和两个survivor(survivor0,survivor1)区<br>指发生在新生代的垃圾收集动作，因为 Java 对象大多都具备朝生夕灭的特性，所以 Minor GC 非常频繁，一般回收速度也比较快。<br>新生代通常存活时间较短，因此基于Copying算法来进行回收，所谓Copying算法就是扫描出存活的对象，并复制到一块新的完全未使用的空间中，对应于新生代，就是在Eden和FromSpace或ToSpace之间copy。新生代采用空闲指针的方式来控制GC触发，指针保持最后一个分配的对象在新生代区间的位置，当有新的对象要分配内存时，用于检查空间是否足够，不够就触发GC。当连续分配对象时，对象会逐渐从eden到survivor，最后到旧生代</li><li>年老代（Old区）的回收算法（回收主要以Mark-Compact算法为主）Full GC<br>指发生在老年代的 GC。旧生代与新生代不同，对象存活的时间比较长，比较稳定，因此采用标记(Mark)算法来进行回收，所谓标记就是扫描出存活的对象，然后再进行回收未被标记的对象，回收后对用空出的空间要么进行合并，要么标记出来便于下次进行分配，总之就是要减少内存碎片带来的效率损耗。Major GC 是清理永久代<ol><li>Eden区域是用来存放使用new或者newInstance等方式创建的对象，默认都是存放在Eden区，除非这个对象太大，或者超过了设定的阈值-XX:PretenureSizeThresold,这样的对象会被直接分配到Old区域。</li><li>2个Survivor（幸存）区，一般称S0，S1，理论上他们是一样大的，解释一下，他们是如何工作的：<br>在不断创建对象的过程中，Eden区会满，这时候会开始做Young G也叫Minor GC，而Young空间的第一次GC就是找出Eden区中，幸存活着的对象，然后将这些对象，放到S0，或S1区中的其中一个， 假设第一次选择了S0，它会逐步将活着的对象拷贝到S0区域，但是如果S0区域满了，剩下活着的对象只能放old区域了，接下来要做的是，将Eden区域 清空，此时时候S1区域也是空的。<br>当第二次Eden区域满的时候，就将Eden区域中活着的对象+S0区域中活着的对象，迁移到S1中，如果S1放不下，就会将剩下的部门，放到Old区域中，只是这次对象来源区域增加了S0，最后会将Eden区+S0区域，清空<br>第三次和第四次依次类推，始终保证S0和S1有一个是空的，用来存储临时对象，用于交换空间的目的，反反复复多次没有被淘汰的对象，将会放入old区域中，默认是15次。具体的交换过程就和上图中的信息相似</li></ol></li></ol><p>参考文献：</p><p><a href="https://www.cnblogs.com/aspirant/p/8662690.html" target="_blank" rel="noopener">https://www.cnblogs.com/aspirant/p/8662690.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;判断对象是否存活一般有两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引用计数：每个对象有一个引用计数属性，新增一个引用时计数加1，引用释放时计数减1，计数为0时可以回收。此方法简单，无法解决对象相互循环引用的问题。 &lt;/li&gt;
&lt;li&gt;可达性分析（Reachability Anal
      
    
    </summary>
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/categories/Java%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/tags/Java%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Java-JVM原理、调优</title>
    <link href="https://www.bestliuhao.club/Java-JVM%E5%8E%9F%E7%90%86%E3%80%81%E8%B0%83%E4%BC%98.html"/>
    <id>https://www.bestliuhao.club/Java-JVM原理、调优.html</id>
    <published>2019-02-28T07:02:05.000Z</published>
    <updated>2019-05-13T09:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/Java-JVM原理、调优/jvm原理、调优.png" alt="JVM原理、调优" title="JVM原理、调优"><br>JVM内存结构由堆、栈、本地方法栈、方法区等部分组成</p><ol><li>堆：主要有新生代空间（Young）和老年代空间（Old），其中Young空间，又被分为2个部    分和3个板块，分别是1个Egen区，和2个Survivor区</li><li>栈：线程私有，JVM为每个新创建的线程都分配一个栈，它的生命周期与线程相同。也就是说,对于一个Java程序来说，它的运行就是通过对栈的操作来完成的。每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程，该过程具有先进后出的特性。<br>本地方法栈：用于支持native方法的执行，存储了每个native方法调用的状态</li><li>方法区：存放了jvm初始化时加载器加载的类信息、静态变量、final类型的常量、属性和方法信息。（永久代和元空间都是方法区的一种实现，区别是，永久代使用的是JVM的堆内存空间，会内存溢出，而元空间使用的是物理内存，直接受到本机的物理内存限制。 ）</li><li>程序计数器：程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器<blockquote><p>方法区和堆是所有线程共享的内存区域；而java栈、本地方法栈和程序员计数器是运行是线程私有的内存区域。</p></blockquote></li></ol><p>jconsole 使用：</p><p>参考文献：</p><p><a href="http://www.importnew.com/23792.html" target="_blank" rel="noopener">http://www.importnew.com/23792.html</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/Java-JVM原理、调优/jvm原理、调优.png&quot; alt=&quot;JVM原理、调优&quot; title=&quot;JVM原理、调优&quot;&gt;&lt;br&gt;JVM内存结构由堆、栈、本地方法栈、方法区等部分组成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;堆：主要有新生代空间（Young）和老年代空
      
    
    </summary>
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/categories/Java%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/tags/Java%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Java-类加载机制</title>
    <link href="https://www.bestliuhao.club/Java-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.html"/>
    <id>https://www.bestliuhao.club/Java-类加载机制.html</id>
    <published>2019-02-28T06:43:57.000Z</published>
    <updated>2019-05-13T09:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>   JVM将类加载过程分为三个步骤：装载（Load），链接（Link）和初始化(Initialize)。<br>链接又分为三个步骤，如下图所示:<br> <img src="/Java-类加载机制/类加载机制1.png" alt="类加载机制1" title="类加载机制1"></p><ol><li>装载：通过类加载器，查找并加载类的二进制数据</li><li>链接：<ol><li>验证：确保被加载类的正确性；检查class文件是否符合JVM字节码格式的，正常情况由编译器生成的class文件肯定符合，如果不是，那需要验证通过才能下一步，安全考虑</li><li>准备：为类的静态变量分配内存，并将其初始化为默认值；如private static int a = 10<br>在准备阶段即a=0，然后解析，再到初始化的时候才a=10</li><li>解析：把类中的符号引用转换为直接引用</li></ol></li><li>初始化：为类的静态变量赋予正确的初始值，及创建对象<blockquote><p>类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个这个类的java.lang.Class对象，用来封装类在方法区类的对象</p></blockquote></li><li>使用对象</li><li>卸载</li></ol><p><em>类加载器</em></p><ol><li>启动类加载器(Bootstrap ClassLoader)：负责加载 JAVA_HOME\lib 目录中的，或通过-Xbootclasspath参数指定路径中的，且被虚拟机认可（按文件名识别，如rt.jar）的类</li><li>扩展类加载器(Extension ClassLoader)：负责加载 JAVA_HOME\lib\ext 目录中的，或通过java.ext.dirs系统变量指定路径中的类库</li><li>应用程序类加载器(Application ClassLoader)：负责加载用户路径（classpath）上的类库</li><li>自定义类加载器<blockquote><p>JDK中的ClassLoader<br><img src="/Java-类加载机制/类加载机制2.png" alt="类加载机制2" title="类加载机制2"><br>通过上面可以看出findClass()的实现，直接抛出一个异常，并且方法是protected，很明显这是留给我们开发者自己去实现的，我们可以通过重写findClass方法来实现我们自己的类加载器。<br>Springboot通过@EnableAutoConfiguration注解，会根据META-INF/spring.<br>factories文件自动配置，通过@Configuration代理原来的xml配置类，通过@ComponentScan配置类扫描路径，反射生成ioc容器</p></blockquote></li></ol><p>参考文献：</p><p><a href="https://www.cnblogs.com/xdouby/p/5829423.html" target="_blank" rel="noopener">https://www.cnblogs.com/xdouby/p/5829423.html</a><br><a href="https://blog.csdn.net/htf2620032/article/details/79298661" target="_blank" rel="noopener">https://blog.csdn.net/htf2620032/article/details/79298661</a> springlboot类加载<br><a href="http://www.cnblogs.com/zheting/p/6707035.html" target="_blank" rel="noopener">http://www.cnblogs.com/zheting/p/6707035.html</a> springboot<br><a href="https://blog.csdn.net/leileibest_437147623/article/details/80898878" target="_blank" rel="noopener">https://blog.csdn.net/leileibest_437147623/article/details/80898878</a> springboot</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;   JVM将类加载过程分为三个步骤：装载（Load），链接（Link）和初始化(Initialize)。&lt;br&gt;链接又分为三个步骤，如下图所示:&lt;br&gt; &lt;img src=&quot;/Java-类加载机制/类加载机制1.png&quot; alt=&quot;类加载机制1&quot; title=&quot;类加载机制
      
    
    </summary>
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/categories/Java%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/tags/Java%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Java-数据类型</title>
    <link href="https://www.bestliuhao.club/Java-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"/>
    <id>https://www.bestliuhao.club/Java-数据类型.html</id>
    <published>2019-02-28T06:25:26.000Z</published>
    <updated>2019-05-13T09:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">位数</th><th style="text-align:center">字节数</th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">8</td><td style="text-align:center">1</td><td style="text-align:center">-2^7 ~ 2^7-1</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">16</td><td style="text-align:center">2</td><td style="text-align:center">-2^15 ~ 2^15-1</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">32</td><td style="text-align:center">4</td><td style="text-align:center">-2^31 ~ 2^31-1</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">64</td><td style="text-align:center">8</td><td style="text-align:center">-2^63 ~ 2^63-1</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">32</td><td style="text-align:center">4</td><td style="text-align:center">2^-149 ~ 2^128-1</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">64</td><td style="text-align:center">8</td><td style="text-align:center">2^-1074 ~ 2^1024-1</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">16</td><td style="text-align:center">2</td><td style="text-align:center">0  ~  2^16-1</td></tr></tbody></table><blockquote><p>boolean:        没有固定大小根据虚拟机定义</p></blockquote><p><em>Bit(位)、byte、字节、汉字的关系</em></p><pre><code>1 bit  = 1  二进制数据1 byte = 8  bit1 字母 = 1  byte = 8 bit1 汉字 = 2  byte = 16 bit</code></pre><ol><li>bit：位<br> 一个二进制数据0或1，是1bit；  </li><li>byte：字节<br>存储空间的基本计量单位，如：MySQL中定义 VARCHAR(45)  即是指 45个字节；<br>1 byte = 8 bit  </li><li>一个英文字符占一个字节；<br> 1 字母 = 1 byte = 8 bit  </li><li>一个汉字占2个字节；<br> 1 汉字 = 2 byte = 16 bit  </li><li>标点符号  <ol><li>汉字输入状态下，默认为全角输入方式；  </li><li>英文输入状态下，默认为半角输入方式；  </li><li>全角输入方式下，标点符号占2字节；  </li><li>半角输入方式下，标点符号占1字节；<br>故：汉字输入状态下的字符，占2个字节 (但不排除，自己更改了默认设置)；  <pre><code>英文输入状态下的字符，占1个字节 (但不排除，自己更改了默认设置)；</code></pre></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;位数&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;字节数&lt;/th&gt;
&lt;th 
      
    
    </summary>
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/categories/Java%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Java总结" scheme="https://www.bestliuhao.club/tags/Java%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Java Bean Validation完成后端数据校验</title>
    <link href="https://www.bestliuhao.club/Java-Bean-Validation%E5%AE%8C%E6%88%90%E5%90%8E%E7%AB%AF%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C.html"/>
    <id>https://www.bestliuhao.club/Java-Bean-Validation完成后端数据校验.html</id>
    <published>2019-01-24T08:04:09.000Z</published>
    <updated>2019-05-13T09:36:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　数据的校验是交互式网站一个不可或缺的功能，前端的js校验可以涵盖大部分的校验职责，如用户名唯一性，生日格式，邮箱格式校验等等常用的<br>校验。但是为了避免用户绕过浏览器，使用http工具直接向后端请求一些违法数据，服务端的数据校验也是必要的，可以防止脏数据落到数据库中，如<br>果数据库中出现一个非法的邮箱格式，也会让运维人员头疼不已。我在之前保险产品研发过程中，系统对数据校验要求比较严格且追求可变性及效率，<br>曾使用drools作为规则引擎，兼任了校验的功能。而在一般的应用，可以使用本文将要介绍的validation来对数据进行校验。</p><h2 id="JSR303-JSR-349"><a href="#JSR303-JSR-349" class="headerlink" title="JSR303/JSR-349"></a>JSR303/JSR-349</h2><p>　　简述JSR303/JSR-349，Hibernate Validation，Spring Validation之间的关系。JSR303是一项标准,JSR-349是其的升级版本，添加了一些<br>新特性，他们规定一些校验规范即校验注解，如@Null，@NotNull，@Pattern，他们位于javax.validation.constraints包下，只提供规范不提供<br>实现。而hibernate validation是对这个规范的实践（不要将hibernate和数据库orm框架联系在一起），他提供了相应的实现，并增加了一些其他校<br>验注解，如@Email，@Length，@Range等等，他们位于org.hibernate.validator.constraints包下。而万能的Spring为了给开发者提供便捷，对<br>Hibernate Validation进行了二次封装，显示校验validated bean时，你可以使用Spring Validation或者Hibernate Validation，而Spring<br>validation另一个特性，便是其在SpringMVC模块中添加了自动校验，并将校验信息封装进了特定的类中。这无疑便捷了我们的web开发。本文主要介<br>绍在SpringMVC中自动校验的机制。注解如下：</p><h3 id="JSR提供的校验注解："><a href="#JSR提供的校验注解：" class="headerlink" title="JSR提供的校验注解："></a>JSR提供的校验注解：</h3><table><thead><tr><th>注解</th><th>注释</th></tr></thead><tbody><tr><td>@Null</td><td>被注释的元素必须为 null</td></tr><tr><td>@NotNull</td><td>被注释的元素必须不为 null</td></tr><tr><td>@AssertTrue</td><td>被注释的元素必须为 true</td></tr><tr><td>@AssertFalse</td><td>被注释的元素必须为 false</td></tr><tr><td>@Min(value)</td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@Max(value)</td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@DecimalMin(value)</td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@DecimalMax(value)</td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@Size(max=, min=)</td><td>被注释的元素的大小必须在指定的范围内</td></tr><tr><td>@Digits (integer, fraction)</td><td>被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td>@Past</td><td>被注释的元素必须是一个过去的日期</td></tr><tr><td>@Future</td><td>被注释的元素必须是一个将来的日期</td></tr><tr><td>@Pattern(regex=,flag=)</td><td>被注释的元素必须符合指定的正则表达式</td></tr></tbody></table><h3 id="Hibernate-Validator提供的校验注解："><a href="#Hibernate-Validator提供的校验注解：" class="headerlink" title="Hibernate Validator提供的校验注解："></a>Hibernate Validator提供的校验注解：</h3><table><thead><tr><th>注解</th><th>注释</th></tr></thead><tbody><tr><td>@NotBlank(message =)</td><td>验证字符串非null，且长度必须大于0</td></tr><tr><td>@Email</td><td>被注释的元素必须是电子邮箱地址</td></tr><tr><td>@Length(min=,max=)</td><td>被注释的字符串的大小必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>被注释的字符串的必须非空</td></tr><tr><td>@Range(min=,max=,message=)</td><td>被注释的元素必须在合适的范围内</td></tr></tbody></table><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="添加JAR包依赖"><a href="#添加JAR包依赖" class="headerlink" title="添加JAR包依赖"></a>添加JAR包依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.7.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;classifier&gt;sources&lt;/classifier&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="简单校验"><a href="#简单校验" class="headerlink" title="简单校验"></a>简单校验</h2><h3 id="1-在pojo中指定校验规则"><a href="#1-在pojo中指定校验规则" class="headerlink" title="1.在pojo中指定校验规则"></a>1.在pojo中指定校验规则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModel</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"姓名"</span>)</span><br><span class="line">    <span class="meta">@NotEmpty</span>(message = <span class="string">"姓名不能为空！"</span>)</span><br><span class="line">    <span class="meta">@Max</span>(value = <span class="number">5</span>, message = <span class="string">"姓名长度不能超过5！"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">10</span>, message = <span class="string">"昵称长度不能超过10！"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"昵称"</span>)</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"[男|女]"</span>, message = <span class="string">"性别只能在男或女中选择！"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"性别"</span>)</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="meta">@Digits</span>(integer = <span class="number">18</span>, fraction = <span class="number">28</span>, message = <span class="string">"年龄必须在18-28之间！"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"年龄"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Past</span>(message = <span class="string">"生日必须在过去的时间里！"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"生日"</span>)</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"籍贯"</span>)</span><br><span class="line">    <span class="keyword">private</span> String nativePlace;</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^0\\d&#123;2,3&#125;-\\d&#123;7,8&#125;$"</span>, message = <span class="string">"固定电话格式不正确！"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"固定电话"</span>)</span><br><span class="line">    <span class="keyword">private</span> String telephone;</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^1\\d&#123;10&#125;$"</span>, message = <span class="string">"移动电话格式不正确！"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"移动电话"</span>)</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="meta">@Email</span>(message = <span class="string">"邮箱格式不正确！"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"邮箱"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"UserInfo&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", nickname='"</span> + nickname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", birthday="</span> + birthday +</span><br><span class="line">                <span class="string">", nativePlace='"</span> + nativePlace + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", telephone='"</span> + telephone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", phone='"</span> + phone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-controller中对其校验绑定进行使用"><a href="#2-controller中对其校验绑定进行使用" class="headerlink" title="2.controller中对其校验绑定进行使用"></a>2.controller中对其校验绑定进行使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.FieldError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> qgs.csmp.zzz.UserInfo;</span><br><span class="line"><span class="keyword">import</span> qgs.framework.core.annotation.AuthPassport;</span><br><span class="line"><span class="keyword">import</span> qgs.framework.core.common.BaseController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"validation校验demo"</span>)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/validation"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AuthPassport</span>(value = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(@Validated UserInfo userInfo, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (FieldError fieldError : bindingResult.getFieldErrors()) &#123;</span><br><span class="line">                sb.append(fieldError.getDefaultMessage()).append(<span class="string">",\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注：<blockquote><p>1、@Validated作用就是将pojo内的注解数据校验规则(@NotNull等)生效，如果没有该注解的声明，pojo内有注解数据校验规则也不会生效<br>2、BindingResult对象用来获取校验失败的信息(@NotNull中的message)，与@Validated注解必须配对使用，一前一后  </p></blockquote></li></ul><h2 id="对BindingResult统一异常拦截"><a href="#对BindingResult统一异常拦截" class="headerlink" title="对BindingResult统一异常拦截"></a>对BindingResult统一异常拦截</h2><p>　　统一异常拦截后，不必每次都对controller接口增加参数BindingResult。代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> qgs.framework.util.utilty.StringUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolationException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionLogInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Exception.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception e)</span> </span>&#123;</span><br><span class="line">        Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">        StringBuilder errorMsg = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        StringBuilder errorLog = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BindingResult || e <span class="keyword">instanceof</span> MethodArgumentNotValidException ||</span><br><span class="line">                e <span class="keyword">instanceof</span> ConstraintViolationException) &#123;</span><br><span class="line">            BindingResult bindingResult = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BindingResult) &#123;</span><br><span class="line">                bindingResult = (BindingResult) e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//实体类中包含其他实体</span></span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> MethodArgumentNotValidException) &#123;</span><br><span class="line">                MethodArgumentNotValidException validException = (MethodArgumentNotValidException) e;</span><br><span class="line">                bindingResult = validException.getBindingResult();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bindingResult != <span class="keyword">null</span> &amp;&amp; bindingResult.getAllErrors() != <span class="keyword">null</span> &amp;&amp; !bindingResult.getAllErrors().isEmpty()) &#123;</span><br><span class="line">                errorMsg = <span class="keyword">new</span> StringBuilder(bindingResult.getAllErrors().get(<span class="number">0</span>).getDefaultMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ConstraintViolationException) &#123;</span><br><span class="line">                Set&lt;ConstraintViolation&lt;?&gt;&gt; violations = ((ConstraintViolationException) e).getConstraintViolations();</span><br><span class="line">                <span class="keyword">for</span> (ConstraintViolation&lt;?&gt; violation : violations) &#123;</span><br><span class="line">                    errorMsg.append(violation.getMessage()).append(<span class="string">", "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            errorMsg.append(StringUtil.isNullOrEmpty(e.getMessage()) ? e.toString() : e.getMessage());</span><br><span class="line">            errorLog.append(StringUtil.isNullOrEmpty(e.getMessage()) ? e.toString() : e.getMessage());</span><br><span class="line">            errorLog.append(<span class="string">"\r\n"</span>);</span><br><span class="line">            <span class="keyword">for</span> (StackTraceElement traceElement : e.getStackTrace()) &#123;</span><br><span class="line">                errorLog.append(traceElement.toString());</span><br><span class="line">                errorLog.append(<span class="string">"\r\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.error(errorLog.toString());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setStatus(<span class="number">500</span>);</span><br><span class="line">            response.setContentType(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">            PrintWriter out = response.getWriter();</span><br><span class="line">            out.append(<span class="string">"&#123;\"msg\":\""</span>).append(errorMsg.toString()).append(<span class="string">"\"&#125;"</span>);</span><br><span class="line">            out.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注：<blockquote><p>这里只对一处不符合规则的错误信息输出</p></blockquote></li></ul><p>此时，controller代码可更改为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@AuthPassport</span>(value = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(@Validated UserInfo userInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@AuthPassport</span>(value = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(@Valid UserInfo userInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>@Validated或者@Valid均可</p><h2 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h2><h3 id="1-什么是分组校验？"><a href="#1-什么是分组校验？" class="headerlink" title="1.什么是分组校验？"></a>1.什么是分组校验？</h3><p>　　校验规则是在pojo制定的，而同一个pojo可以被多个Controller使用，此时会有问题，即：不同的Controller方法对同一个pojo进行校验，此时<br>这些校验信息是共享在这不同的Controller方法中，但是实际上每个Controller方法可能需要不同的校验，在这种情况下，就需要使用分组校验来<br>解决这种问题，通俗的讲，一个pojo中有很多属性，controller中的方法1可能只需要校验pojo中的属性1，controller中的方法2只需要校验pojo中<br>的属性2，但是pojo中的校验注解有很多，怎样才能使方法1只校验属性1，方法二只校验属性2呢？就需要用分组校验来解决了。</p><h3 id="2-定义分组"><a href="#2-定义分组" class="headerlink" title="2.定义分组"></a>2.定义分组</h3><p>　　1.定义空的接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValidationGroup1</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValidationGroup2</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　2.修改pojo，注解增加参数groups<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"姓名"</span>)</span><br><span class="line">    <span class="meta">@NotEmpty</span>(message = <span class="string">"姓名不能为空！"</span>, groups = ValidationGroup1.class)</span><br><span class="line">    <span class="meta">@Max</span>(value = <span class="number">5</span>, message = <span class="string">"姓名长度不能超过5！"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">10</span>, message = <span class="string">"昵称长度不能超过10！"</span>, groups = ValidationGroup2.class)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"昵称"</span>)</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"[男|女]"</span>, message = <span class="string">"性别只能在男或女中选择！"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"性别"</span>)</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="meta">@Digits</span>(integer = <span class="number">18</span>, fraction = <span class="number">28</span>, message = <span class="string">"年龄必须在18-28之间！"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"年龄"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Past</span>(message = <span class="string">"生日必须在过去的时间里！"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"生日"</span>)</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"籍贯"</span>)</span><br><span class="line">    <span class="keyword">private</span> String nativePlace;</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^0\\d&#123;2,3&#125;-\\d&#123;7,8&#125;$"</span>, message = <span class="string">"固定电话格式不正确！"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"固定电话"</span>)</span><br><span class="line">    <span class="keyword">private</span> String telephone;</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^1\\d&#123;10&#125;$"</span>, message = <span class="string">"移动电话格式不正确！"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"移动电话"</span>)</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="meta">@Email</span>(message = <span class="string">"邮箱格式不正确！"</span>)</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"邮箱"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"UserInfo&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", nickname='"</span> + nickname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", birthday="</span> + birthday +</span><br><span class="line">                <span class="string">", nativePlace='"</span> + nativePlace + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", telephone='"</span> + telephone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", phone='"</span> + phone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　2.修改controller<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@AuthPassport</span>(value = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(@Validated(value = &#123;ValidationGroup1.class&#125;)</span> UserInfo userInfo) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>注：<blockquote><p>此时只能使用@Validated注解<br>如上，只校验pojo中groups为ValidationGroup1的属性，如name有两处校验，只会校验是否为空而不会校验长度是否大于5</p></blockquote></li></ul><h2 id="自定义注解校验"><a href="#自定义注解校验" class="headerlink" title="自定义注解校验"></a>自定义注解校验</h2><p>　　业务需求总是比框架提供的这些简单校验要复杂的多，我们可以自定义校验来满足我们的需求。自定义Spring Validation非常简单，主要分为两步。<br>　　1.自定义校验注解<br>我们尝试添加一个“字符串不能包含空格”的限制。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = &#123;CannotHaveBlankValidator.class&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CannotHaveBlank &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "不能包含空格"</span>;</span><br><span class="line">    </span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定多个时使用</span></span><br><span class="line">    <span class="meta">@Target</span>(&#123;FIELD, METHOD, PARAMETER, ANNOTATION_TYPE&#125;)</span><br><span class="line">    <span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@interface</span> List &#123;</span><br><span class="line">        CannotHaveBlank[] value();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　2 编写校验类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CannotHaveBlankValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">CannotHaveBlank</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(CannotHaveBlank constraintAnnotation)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//null时不进行校验</span></span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; value.contains(<span class="string">" "</span>)) &#123;</span><br><span class="line">            <span class="comment">//获取默认提示信息</span></span><br><span class="line">            String defaultConstraintMessageTemplate = context.getDefaultConstraintMessageTemplate();</span><br><span class="line">            System.out.println(<span class="string">"default message :"</span> + defaultConstraintMessageTemplate);</span><br><span class="line">            <span class="comment">//禁用默认提示信息</span></span><br><span class="line">            context.disableDefaultConstraintViolation();</span><br><span class="line">            <span class="comment">//设置提示语</span></span><br><span class="line">            context.buildConstraintViolationWithTemplate(<span class="string">"can not contains blank"</span>).addConstraintViolation();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>注:<blockquote><p>所有的验证者都需要实现ConstraintValidator接口，它的接口包含一个初始化事件方法，和一个判断是否合法的方法。<br>ConstraintValidatorContext 这个上下文包含了认证中所有的信息，我们可以利用这个上下文实现获取默认错误提示信息，禁用错误提示信息，<br>改写错误提示信息等操作。 </p></blockquote><div style="display:none;"><h2 id="基于方法校验-controller层方法中单个参数校验"><a href="#基于方法校验-controller层方法中单个参数校验" class="headerlink" title="基于方法校验(controller层方法中单个参数校验)"></a>基于方法校验(controller层方法中单个参数校验)</h2></div></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"validation校验demo"</span>)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/validation"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AuthPassport</span>(value = <span class="keyword">false</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(@NotNull(message = <span class="string">"不能为空"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.为类添加@Validated注解<br>2.校验方法的返回值和入参<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;　　数据的校验是交互式网站一个不可或缺的功能，前端的js校验可以涵盖大部分的校验职责，如用户名唯一性，生日格式，邮箱格式校验等等常用的&lt;br
      
    
    </summary>
    
      <category term="Java" scheme="https://www.bestliuhao.club/categories/Java/"/>
    
    
      <category term="Validation完成后端数据校验" scheme="https://www.bestliuhao.club/tags/Validation%E5%AE%8C%E6%88%90%E5%90%8E%E7%AB%AF%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/"/>
    
  </entry>
  
</feed>
